// ===========================
// Карта Google Maps с маркерами
// ===========================
function initMap() {
  // Находим все элементы с классом .map (может быть несколько карт)
  document.querySelectorAll('.map').forEach((mapEl) => {
    // Инициализация карты Google Maps
    let map = new google.maps.Map(mapEl, {
      center: {
        lng: window.mapOptions.center_lng,
        lat: window.mapOptions.center_lat,
      },
      zoom: window.mapOptions.zoom,
      streetViewControl: false,
      disableDefaultUI: true,
      zoomControl: true,
    });

    // Стили карты
    map.setOptions({
      styles: [
        { featureType: 'all', elementType: 'labels.text.fill', stylers: [{ saturation: 36 }, { color: '#000000' }, { lightness: 40 }] },
        { featureType: 'all', elementType: 'labels.text.stroke', stylers: [{ visibility: 'on' }, { color: '#000000' }, { lightness: 16 }] },
        { featureType: 'all', elementType: 'labels.icon', stylers: [{ visibility: 'off' }] },
        { featureType: 'administrative', elementType: 'geometry.fill', stylers: [{ lightness: 20 }] },
        { featureType: 'administrative', elementType: 'geometry.stroke', stylers: [{ color: '#000000' }, { lightness: 17 }, { weight: 1.2 }] },
        { featureType: 'administrative.province', elementType: 'labels.text.fill', stylers: [{ color: '#e3b141' }] },
        { featureType: 'administrative.locality', elementType: 'labels.text.fill', stylers: [{ color: '#e0a64b' }] },
        { featureType: 'administrative.locality', elementType: 'labels.text.stroke', stylers: [{ color: '#0e0d0a' }] },
        { featureType: 'administrative.neighborhood', elementType: 'labels.text.fill', stylers: [{ color: '#d1b995' }] },
        { featureType: 'landscape', elementType: 'geometry', stylers: [{ color: '#000000' }, { lightness: 20 }] },
        { featureType: 'poi', elementType: 'geometry', stylers: [{ color: '#000000' }, { lightness: 21 }] },
        { featureType: 'poi.attraction', elementType: 'geometry.fill', stylers: [{ visibility: 'on' }, { color: '#c07d7d' }] },
        { featureType: 'road', elementType: 'labels.text.stroke', stylers: [{ color: '#12120f' }] },
        { featureType: 'road.highway', elementType: 'geometry.fill', stylers: [{ lightness: '-77' }, { gamma: '4.48' }, { saturation: '24' }, { weight: '0.65' }] },
        { featureType: 'road.highway', elementType: 'geometry.stroke', stylers: [{ lightness: 29 }, { weight: 0.2 }] },
        { featureType: 'road.highway.controlled_access', elementType: 'geometry.fill', stylers: [{ color: '#f6b044' }] },
        { featureType: 'road.arterial', elementType: 'geometry', stylers: [{ color: '#4f4e49' }, { weight: 0.36 }] },
        { featureType: 'road.arterial', elementType: 'labels.text.fill', stylers: [{ color: '#c4ac87' }] },
        { featureType: 'road.arterial', elementType: 'labels.text.stroke', stylers: [{ color: '#262307' }] },
        { featureType: 'road.local', elementType: 'geometry', stylers: [{ color: '#a4875a' }, { lightness: 16 }, { weight: 0.16 }] },
        { featureType: 'road.local', elementType: 'labels.text.fill', stylers: [{ color: '#deb483' }] },
        { featureType: 'transit', elementType: 'geometry', stylers: [{ color: '#000000' }, { lightness: 19 }] },
        { featureType: 'water', elementType: 'geometry', stylers: [{ color: '#0f252e' }, { lightness: 17 }] },
        { featureType: 'water', elementType: 'geometry.fill', stylers: [{ color: '#080808' }, { gamma: '3.14' }, { weight: '1.07' }] },
      ],
    });

    // Добавление маркеров на карту
    markers.forEach((m) => {
      const marker = new google.maps.Marker({
        position: m.about,
        icon: window.mapOptions.marker_ico,
        map: map,
        optimized: false,
      });

      // Окно информации для маркера
      const infoWindow = new google.maps.InfoWindow({
        map: map,
        content: `
          <div class="map__point">
            <div class="map__point-inner">
              <img class="map__point-img" src="${m.about.img}" alt="фото сто">
              <div class="map__point-address">${m.about.address}</div>
            </div>
            <div class="map__point-time">${m.about.time}</div>
            <a class="map__point-link" href="${m.about.link}" target="_blank">Прокласти маршрут</a>
          </div>
        `,
      });

      // Клик по адресу открывает инфо-окно и центрирует карту
      document.querySelectorAll('.about-v2__address-link').forEach((link) => {
        link.addEventListener('click', () => {
          if (link.id === m.about.id) {
            map.setCenter({ lat: m.about.lat, lng: +m.about.lng }, 16);
            infoWindow.open({ anchor: marker, map: map, position: m.about, id: m.about.id });
          }
        });
      });
    });
  });
}

// ===========================
// UI функционал (скролл, меню, фильтры, анимации)
// ===========================
(function () {
  'use strict';

  // Утилиты для выбора элементов
  const select = (el, all = false) => {
    el = el.trim();
    return all ? [...document.querySelectorAll(el)] : document.querySelector(el);
  };

  const on = (type, el, listener, all = false) => {
    const selected = select(el, all);
    if (selected) {
      if (all) selected.forEach((e) => e.addEventListener(type, listener));
      else selected.addEventListener(type, listener);
    }
  };

  const onscroll = (el, listener) => el.addEventListener('scroll', listener);

  // ===========================
  // Navbar активные ссылки при скролле
  // ===========================
  let navbarLinks = select('#navbar .scrollto', true);

  const navbarLinksActive = () => {
    let position = window.scrollY + 200;
    navbarLinks.forEach((link) => {
      if (!link.hash) return;
      let section = select(link.hash);
      if (!section) return;
      if (position >= section.offsetTop && position <= section.offsetTop + section.offsetHeight) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
  };

  window.addEventListener('load', navbarLinksActive);
  onscroll(document, navbarLinksActive);

  // ===========================
  // Плавный скролл к секциям
  // ===========================
  const scrollto = (el) => {
    let elementPos = select(el).offsetTop;
    window.scrollTo({ top: elementPos, behavior: 'smooth' });
  };

  // ===========================
  // Кнопка "Back to Top"
  // ===========================
  let backToTop = select('.back-to-top');
  if (backToTop) {
    const toggleBackToTop = () => {
      window.scrollY > 100 ? backToTop.classList.add('active') : backToTop.classList.remove('active');
    };
    window.addEventListener('load', toggleBackToTop);
    onscroll(document, toggleBackToTop);
  }

  // ===========================
  // Мобильное меню
  // ===========================
  on('click', '.mobile-nav-toggle', function () {
    select('body').classList.toggle('mobile-nav-active');
    this.classList.toggle('bi-list');
    this.classList.toggle('bi-x');
  });

  // ===========================
  // Плавный скролл при клике на ссылку
  // ===========================
  on(
    'click',
    '.scrollto',
    function (e) {
      if (select(this.hash)) {
        e.preventDefault();
        if (select('body').classList.contains('mobile-nav-active')) {
          select('body').classList.remove('mobile-nav-active');
          let toggle = select('.mobile-nav-toggle');
          toggle.classList.toggle('bi-list');
          toggle.classList.toggle('bi-x');
        }
        scrollto(this.hash);
      }
    },
    true
  );

  window.addEventListener('load', () => {
    if (window.location.hash && select(window.location.hash)) scrollto(window.location.hash);
  });

  // ===========================
  // Typed.js анимация текста
  // ===========================
/*   let typedElement = select('.typed');
  if (typedElement) {
    let typedStrings = typedElement.getAttribute('data-typed-items').split(',');
    new Typed('.typed', { strings: typedStrings, loop: true, typeSpeed: 100, backSpeed: 50, backDelay: 2000 });
  } */

  // ===========================
  // Анимация навыков (skills bar)
  // ===========================
  let skillsContent = select('.skills-content');
  if (skillsContent) {
    new Waypoint({
      element: skillsContent,
      offset: '80%',
      handler: function () {
        select('.progress .progress-bar', true).forEach((el) => {
          el.style.width = el.getAttribute('aria-valuenow') + '%';
        });
      },
    });
  }

  // ===========================
  // Фильтры портфолио
  // ===========================
  window.addEventListener('load', () => {
    let portfolioContainer = select('.portfolio-container');
    if (portfolioContainer) {
      let iso = new Isotope(portfolioContainer, { itemSelector: '.portfolio-item' });
      let filters = select('#portfolio-flters li', true);
      on(
        'click',
        '#portfolio-flters li',
        function (e) {
          e.preventDefault();
          filters.forEach((el) => el.classList.remove('filter-active'));
          this.classList.add('filter-active');
          iso.arrange({ filter: this.getAttribute('data-filter') });
          iso.on('arrangeComplete', () => AOS.refresh());
        },
        true
      );
    }
  });

  // ===========================
  // Портфолио лайтбокс
  // ===========================
  GLightbox({ selector: '.portfolio-lightbox' });

  // ===========================
  // Слайдеры
  // ===========================
  new Swiper('.portfolio-details-slider', {
    speed: 400,
    loop: true,
    autoplay: { delay: 5000, disableOnInteraction: false },
    pagination: { el: '.swiper-pagination', type: 'bullets', clickable: true },
  });

  new Swiper('.testimonials-slider', {
    speed: 600,
    loop: true,
    autoplay: { delay: 5000, disableOnInteraction: false },
    slidesPerView: 'auto',
    pagination: { el: '.swiper-pagination', type: 'bullets', clickable: true },
    breakpoints: { 320: { slidesPerView: 1, spaceBetween: 20 }, 1200: { slidesPerView: 3, spaceBetween: 20 } },
  });

  // ===========================
  // AOS анимация при скролле
  // ===========================
  window.addEventListener('load', () => {
    AOS.init({ duration: 1000, easing: 'ease-in-out', once: true, mirror: false });
  });

  // ===========================
  // PureCounter (счётчики)
  // ===========================
  new PureCounter();
})();

// Экспорт функции карты в глобальную область
window.initMap = initMap;
